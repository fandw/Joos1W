Type:
	PrimitiveType
	ReferenceType

PrimitiveType:
	NumericType
	boolean

NumericType:
	IntegralType
	FloatingPointType

IntegralType: one of
	byte short int long char

FloatingPointType: one of
	float double

ReferenceType:
	ClassOrInterfaceType
	ArrayType

ClassOrInterfaceType:
	ClassType
	InterfaceType

ClassType:
	TypeName

InterfaceType:
	TypeName

ArrayType:
	Type [ ]

PackageName:
	Identifier
	PackageName . Identifier

TypeName:
	Identifier
	PackageOrTypeName . Identifier

ExpressionName:
	Identifier
	AmbiguousName . Identifier

MethodName:
	Identifier
	AmbiguousName . Identifier

PackageOrTypeName:
	Identifier
	PackageOrTypeName . Identifier

AmbiguousName:
	Identifier
	AmbiguousName . Identifier

CompilationUnit:
	PackageDeclarationopt ImportDeclarationsopt TypeDeclarationsopt

ImportDeclarations:
	ImportDeclaration
	ImportDeclarations ImportDeclaration

TypeDeclarations:
	TypeDeclaration
	TypeDeclarations TypeDeclaration

PackageDeclaration:
	package PackageName ;

ImportDeclaration:
	SingleTypeImportDeclaration
	TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:
	import TypeName ;

TypeImportOnDemandDeclaration:
	import PackageOrTypeName . * ;

TypeDeclaration:
	ClassDeclaration
	InterfaceDeclaration
	;

ClassDeclaration:
	ClassModifiersopt class Identifier Superopt Interfacesopt ClassBody

ClassModifiers:
	ClassModifier
	ClassModifiers ClassModifier

ClassModifier: one of
	public protected private
	abstract static final strictfp

Super:
	extends ClassType

ClassType:
	TypeName

Interfaces:
	implements InterfaceTypeList

InterfaceTypeList:
	InterfaceType
	InterfaceTypeList , InterfaceType

InterfaceType:
	TypeName

ClassBody:
	{ ClassBodyDeclarationsopt }

ClassBodyDeclarations:
	ClassBodyDeclaration
	ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration:
	ClassMemberDeclaration
	InstanceInitializer
	StaticInitializer
	ConstructorDeclaration

ClassMemberDeclaration:
	FieldDeclaration
	MethodDeclaration
	ClassDeclaration						
	InterfaceDeclaration
	;		

FieldDeclaration:
	FieldModifiersopt Type VariableDeclarators ;

VariableDeclarators:
	VariableDeclarator
	VariableDeclarators , VariableDeclarator

VariableDeclarator:
	VariableDeclaratorId
	VariableDeclaratorId = VariableInitializer

VariableDeclaratorId:
	Identifier
	VariableDeclaratorId [ ]

VariableInitializer:
	Expression
	ArrayInitializer

FieldModifiers:
	FieldModifier
	FieldModifiers FieldModifier

FieldModifier: one of
	public protected private
	static final transient volatile

MethodDeclaration:
	MethodHeader MethodBody

MethodHeader:
	MethodModifiersopt ResultType MethodDeclarator Throwsopt

ResultType:
	Type
	void

MethodDeclarator:
	Identifer ( FormalParameterListopt )

MethodDeclarator:
	MethodDeclarator [ ]

FormalParameterList:
	FormalParameter
	FormalParameterList , FormalParameter

FormalParameter:
	finalopt Type VariableDeclaratorId

VariableDeclaratorId:
	Identifier
	VariableDeclaratorId [ ]

MethodModifiers:
	MethodModifier
	MethodModifiers MethodModifier

MethodModifier: one of
	public protected private abstract static
	final synchronized native strictfp

Throws:
	throws ClassTypeList

ClassTypeList:
	ClassType
	ClassTypeList , ClassType

MethodBody:
	Block 
	;

InstanceInitializer:
	Block

StaticInitializer:
	static Block

ConstructorDeclaration:
	ConstructorModifiersopt ConstructorDeclarator
		Throwsopt ConstructorBody

ConstructorDeclarator:
	SimpleTypeName ( FormalParameterListopt )

ConstructorModifiers:
	ConstructorModifier
	ConstructorModifiers ConstructorModifier

ConstructorModifier: one of
	public protected private

ConstructorBody:
	{ ExplicitConstructorInvocationopt BlockStatementsopt }

ExplicitConstructorInvocation:
	this ( ArgumentListopt ) ;
	super ( ArgumentListopt ) ;
	Primary.super ( ArgumentListopt ) ; 

InterfaceDeclaration:
	InterfaceModifiersopt interface Identifier
		ExtendsInterfacesopt InterfaceBody

InterfaceModifiers:
	InterfaceModifier
	InterfaceModifiers InterfaceModifier

InterfaceModifier: one of
	public protected private
	abstract static strictfp

ExtendsInterfaces:
	extends InterfaceType
	ExtendsInterfaces , InterfaceType

InterfaceType:
	TypeName

InterfaceBody:
	{ InterfaceMemberDeclarationsopt }

InterfaceMemberDeclarations:
	InterfaceMemberDeclaration
	InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration:
	ConstantDeclaration
	AbstractMethodDeclaration
	ClassDeclaration 
	InterfaceDeclaration
	;

ConstantDeclaration:
	ConstantModifiersopt Type VariableDeclarators

ConstantModifiers: 
	ConstantModifier
	ConstantModifiers ConstantModifer 

ConstantModifier: one of
	public static final

AbstractMethodDeclaration:
	AbstractMethodModifiersopt ResultType MethodDeclarator Throwsopt ;

AbstractMethodModifiers:
	AbstractMethodModifier
	AbstractMethodModifiers AbstractMethodModifier

AbstractMethodModifier: one of
	public abstract

ArrayInitializer:
	{ VariableInitializersopt ,opt }

VariableInitializers:
	VariableInitializer
	VariableInitializers , VariableInitializer

VariableInitializer:
	Expression
	ArrayInitializer

Block:
	{ BlockStatementsopt }

BlockStatements:
	BlockStatement
	BlockStatements BlockStatement

BlockStatement:
	LocalVariableDeclarationStatement
	ClassDeclaration
	Statement

LocalVariableDeclarationStatement:
	LocalVariableDeclaration ;

LocalVariableDeclaration:
	finalopt Type VariableDeclarators

VariableDeclarators:
	VariableDeclarator
	VariableDeclarators , VariableDeclarator

VariableDeclarator:
	VariableDeclaratorId
	VariableDeclaratorId = VariableInitializer

VariableDeclaratorId:
	Identifier
	VariableDeclaratorId [ ]

VariableInitializer:
	Expression
	ArrayInitializer

Statement:
	StatementWithoutTrailingSubstatement
	LabeledStatement
	IfThenStatement
	IfThenElseStatement
	WhileStatement
	ForStatement

StatementWithoutTrailingSubstatement:
	Block
	EmptyStatement
	ExpressionStatement
	SwitchStatement
	DoStatement
	BreakStatement
	ContinueStatement
	ReturnStatement
	SynchronizedStatement
	ThrowStatement
	TryStatement

StatementNoShortIf:
	StatementWithoutTrailingSubstatement
	LabeledStatementNoShortIf
	IfThenElseStatementNoShortIf
	WhileStatementNoShortIf
	ForStatementNoShortIf

IfThenStatement:
	if ( Expression ) Statement

IfThenElseStatement:
	if ( Expression ) StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:
	if ( Expression ) StatementNoShortIf else StatementNoShortIf

EmptyStatement:
	;

LabeledStatement:
	Identifier : Statement

LabeledStatementNoShortIf:
	Identifier : StatementNoShortIf

ExpressionStatement:
	StatementExpression ;

StatementExpression:
	Assignment
	PreIncrementExpression
	PreDecrementExpression
	PostIncrementExpression
	PostDecrementExpression
	MethodInvocation
	ClassInstanceCreationExpression

IfThenStatement:
	if ( Expression ) Statement

IfThenElseStatement:
	if ( Expression ) StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:
	if ( Expression ) StatementNoShortIf else StatementNoShortIf

SwitchStatement:
	switch ( Expression ) SwitchBlock

SwitchBlock:
	{ SwitchBlockStatementGroupsopt SwitchLabelsopt }

SwitchBlockStatementGroups:
	SwitchBlockStatementGroup
	SwitchBlockStatementGroups SwitchBlockStatementGroup

SwitchBlockStatementGroup:
	SwitchLabels BlockStatements

SwitchLabels:
	SwitchLabel
	SwitchLabels SwitchLabel

SwitchLabel:
	case ConstantExpression :
	default :

WhileStatement:
	while ( Expression ) Statement

WhileStatementNoShortIf:
	while ( Expression ) StatementNoShortIf

DoStatement:
	do Statement while ( Expression ) ;

ForStatement:
	for ( ForInitopt ; Expressionopt ; ForUpdateopt )
		Statement

ForStatementNoShortIf:
	for ( ForInitopt ; Expressionopt ; ForUpdateopt )
		StatementNoShortIf

ForInit:
	StatementExpressionList
	LocalVariableDeclaration

ForUpdate:
	StatementExpressionList

StatementExpressionList:
	StatementExpression
	StatementExpressionList , StatementExpression

BreakStatement:
	break Identifieropt ;

ContinueStatement:
	continue Identifieropt ;

ReturnStatement:
	return Expressionopt ;

ThrowStatement:
	throw Expression ;

SynchronizedStatement:
	synchronized ( Expression ) Block

TryStatement:
	try Block Catches
	try Block Catchesopt Finally

Catches:
	CatchClause
	Catches CatchClause

CatchClause:
	catch ( FormalParameter ) Block

Finally:
	finally Block

FormalParameter:
	finalopt Type VariableDeclaratorId

VariableDeclaratorId:
	Identifier
	VariableDeclaratorId [ ]

Primary:
	PrimaryNoNewArray
	ArrayCreationExpression

PrimaryNoNewArray:
	Literal
	Type . class 
	void . class 
	this
	ClassName.this
	( Expression )
	ClassInstanceCreationExpression
	FieldAccess
	MethodInvocation
	ArrayAccess

Literal: 
	IntegerLiteral
	FloatingPointLiteral
	BooleanLiteral
	CharacterLiteral
	StringLiteral
	NullLiteral

ClassInstanceCreationExpression:
	new ClassOrInterfaceType ( ArgumentListopt ) ClassBodyopt
	Primary.new Identifier ( ArgumentListopt ) ClassBodyopt

ArgumentList:
	Expression
	ArgumentList , Expression

ArrayCreationExpression:
	new PrimitiveType DimExprs Dimsopt
	new TypeName DimExprs Dimsopt
	new PrimitiveType Dims ArrayInitializer 
	new TypeName Dims ArrayInitializer
 DimExprs:
	DimExpr
	DimExprs DimExpr

DimExpr:
	[ Expression ]

Dims:
	[ ]
	Dims [ ]

FieldAccess: 
	Primary . Identifier
	super . Identifier
	ClassName .super . Identifier

MethodInvocation:
	MethodName ( ArgumentListopt )
	Primary . Identifier ( ArgumentListopt )
	super . Identifier ( ArgumentListopt )
	ClassName . super . Identifier ( ArgumentListopt )

ArgumentList:
	Expression
	ArgumentList , Expression

ArrayAccess:
	ExpressionName [ Expression ]
	PrimaryNoNewArray [ Expression ]

PostfixExpression:
	Primary
	ExpressionName
	PostIncrementExpression
	PostDecrementExpression

PostIncrementExpression:
	PostfixExpression ++

PostDecrementExpression:
	PostfixExpression --

UnaryExpression:
	PreIncrementExpression
	PreDecrementExpression
	+ UnaryExpression
	- UnaryExpression
	UnaryExpressionNotPlusMinus

PreIncrementExpression:
	++ UnaryExpression

PreDecrementExpression:
	-- UnaryExpression

UnaryExpressionNotPlusMinus:
	PostfixExpression
	~ UnaryExpression
	! UnaryExpression
	CastExpression

CastExpression:
	( PrimitiveType ) UnaryExpression
	( ReferenceType ) UnaryExpressionNotPlusMinus

CastExpression:
	( PrimitiveType Dimsopt ) UnaryExpression
	( ReferenceType ) UnaryExpressionNotPlusMinus

MultiplicativeExpression:
	UnaryExpression
	MultiplicativeExpression * UnaryExpression
	MultiplicativeExpression / UnaryExpression
	MultiplicativeExpression % UnaryExpression

AdditiveExpression:
	MultiplicativeExpression
	AdditiveExpression + MultiplicativeExpression
	AdditiveExpression - MultiplicativeExpression

ShiftExpression:
	AdditiveExpression
	ShiftExpression << AdditiveExpression
	ShiftExpression >> AdditiveExpression
	ShiftExpression >>> AdditiveExpression

RelationalExpression:
	ShiftExpression
	RelationalExpression < ShiftExpression
	RelationalExpression > ShiftExpression
	RelationalExpression <= ShiftExpression
	RelationalExpression >= ShiftExpression
	RelationalExpression instanceof ReferenceType

EqualityExpression:
	RelationalExpression
	EqualityExpression == RelationalExpression
	EqualityExpression != RelationalExpression

AndExpression:
	EqualityExpression
	AndExpression & EqualityExpression

ExclusiveOrExpression:
	AndExpression
	ExclusiveOrExpression ^ AndExpression

InclusiveOrExpression:
	ExclusiveOrExpression
	InclusiveOrExpression | ExclusiveOrExpression

ConditionalAndExpression:
	InclusiveOrExpression
	ConditionalAndExpression && InclusiveOrExpression

ConditionalOrExpression:
	ConditionalAndExpression
	ConditionalOrExpression || ConditionalAndExpression

ConditionalExpression:
	ConditionalOrExpression
	ConditionalOrExpression ? Expression : ConditionalExpression

AssignmentExpression:
	ConditionalExpression
	Assignment

Assignment:
	LeftHandSide AssignmentOperator AssignmentExpression

LeftHandSide:
	ExpressionName
	FieldAccess
	ArrayAccess

AssignmentOperator: one of
	= *= /= %= += -= <<= >>= >>>= &= ^= |=

Expression:
	AssignmentExpression

ConstantExpression:
	Expression

