Goal:
	CompilationUnit

Literal:
	IntegerLiteral
	BooleanLiteral
	CharacterLiteral
	StringLiteral
	NullLiteral

Type:
	PrimitiveType
	ReferenceType

PrimitiveType:
	NumericType
	boolean

NumericType: one of
	byte short int char

ReferenceType:
	ClassOrInterfaceType
	ArrayType

ClassOrInterfaceType:
	Name

ClassType:
	ClassOrInterfaceType

InterfaceType:
	ClassOrInterfaceType

ArrayType:
	PrimitiveType [ ]
	Name [ ]
	ArrayType [ ]

Name:
	SimpleName
	QualifiedName

SimpleName:
	Identifier

QualifiedName:
	Name . Identifier

CompilationUnit:
	PackageDeclarationopt ImportDeclarationsopt TypeDeclarationopt

ImportDeclarations:
	ImportDeclaration
	ImportDeclarations ImportDeclaration

PackageDeclaration:
	package Name ;

ImportDeclaration:
	SingleTypeImportDeclaration
	TypeImportOnDemandDeclaration

SingleTypeImportDeclaration:
	import Name ;

TypeImportOnDemandDeclaration:
	import Name . * ;

TypeDeclaration:
	ClassDeclaration
	InterfaceDeclaration
	;

Modifiers:
	Modifier
	Modifiers Modifier

Modifier: one of
	public protected private
	static
	abstract final native

ClassDeclaration:
	Modifiersopt class Identifier Superopt Interfacesopt ClassBody

Super:
	extends ClassType

Interfaces:
	implements InterfaceTypeList

InterfaceTypeList:
	InterfaceType
	InterfaceTypeList , InterfaceType

ClassBody:
	{ ClassBodyDeclarationsopt }

ClassBodyDeclarations:
	ClassBodyDeclaration
	ClassBodyDeclarations ClassBodyDeclaration

ClassBodyDeclaration:
	ClassMemberDeclaration
	ConstructorDeclaration

ClassMemberDeclaration:
	FieldDeclaration
	MethodDeclaration

FieldDeclaration:
	Modifiersopt Type VariableDeclarator ;

VariableDeclarator:
	Identifier = VariableInitializer

VariableDeclaratorId:
	Identifier
	Identifier [ ]

VariableInitializer:
	Expression

MethodDeclaration:
	MethodHeader MethodBody

MethodHeader:
	Modifiersopt Type MethodDeclarator
	Modifiersopt void MethodDeclarator

MethodDeclarator:
	Identifier ( FormalParameterListopt )

FormalParameterList:
	FormalParameter
	FormalParameterList , FormalParameter

FormalParameter:
	Type VariableDeclaratorId

ClassTypeList:
	ClassType
	ClassTypeList , ClassType

MethodBody:
	Block
	;

ConstructorDeclaration:
	Modifiersopt ConstructorDeclarator ConstructorBody

ConstructorDeclarator:
	SimpleName ( FormalParameterListopt )

ConstructorBody:
	{ BlockStatementsopt }

InterfaceDeclaration:
	Modifiersopt interface Identifier ExtendsInterfacesopt InterfaceBody

ExtendsInterfaces:
	extends InterfaceType
	ExtendsInterfaces , InterfaceType

InterfaceBody:
	{ InterfaceMemberDeclarationsopt }

InterfaceMemberDeclarations:
	InterfaceMemberDeclaration
	InterfaceMemberDeclarations InterfaceMemberDeclaration

InterfaceMemberDeclaration:
	AbstractMethodDeclaration

AbstractMethodDeclaration:
	MethodHeader ;

VariableInitializers:
	VariableInitializer
	VariableInitializers , VariableInitializer

Block:
	{ BlockStatementsopt }

BlockStatements:
	BlockStatement
	BlockStatements BlockStatement

BlockStatement:
	LocalVariableDeclarationStatement
	Statement

LocalVariableDeclarationStatement:
	LocalVariableDeclaration ;

LocalVariableDeclaration:
	Type VariableDeclarator

Statement:
	StatementWithoutTrailingSubstatement
	IfThenStatement
	IfThenElseStatement
	WhileStatement
	ForStatement

StatementNoShortIf:
	StatementWithoutTrailingSubstatement
	IfThenElseStatementNoShortIf
	WhileStatementNoShortIf
	ForStatementNoShortIf

StatementWithoutTrailingSubstatement:
	Block
	EmptyStatement
	ExpressionStatement
	ReturnStatement

EmptyStatement:
	;

ExpressionStatement:
	StatementExpression ;

StatementExpression:
	Assignment
	MethodInvocation
	ClassInstanceCreationExpression

IfThenStatement:
	if ( Expression ) Statement

IfThenElseStatement:
	if ( Expression ) StatementNoShortIf else Statement

IfThenElseStatementNoShortIf:
	if ( Expression ) StatementNoShortIf else StatementNoShortIf

WhileStatement:
	while ( Expression ) Statement

WhileStatementNoShortIf:
	while ( Expression ) StatementNoShortIf

ForStatement:
	for ( LocalVariableDeclaration ; Expressionopt ; StatementExpression ) Statement

ForStatementNoShortIf:

	for ( LocalVariableDeclaration ; Expressionopt ; StatementExpression ) StatementNoShortIf

ReturnStatement:
	return Expressionopt ;

Primary:
	PrimaryNoNewArray
	ArrayCreationExpression

PrimaryNoNewArray:
	Literal
	this
	( Expression )
	ClassInstanceCreationExpression
	FieldAccess
	MethodInvocation
	ArrayAccess

ClassInstanceCreationExpression:
	new ClassType ( ArgumentListopt )

ArgumentList:
	Expression
	ArgumentList , Expression

ArrayCreationExpression:
	new PrimitiveType DimExpr
	new ClassOrInterfaceType DimExpr

DimExpr:
	[ Expression ]

Dim:
	[ ]

FieldAccess:
	Primary . Identifier

MethodInvocation:
	Name ( ArgumentListopt )
	Primary . Identifier ( ArgumentListopt )

ArrayAccess:
	Name [ Expression ]
	PrimaryNoNewArray [ Expression ]

PostfixExpression:
	Primary
	Name

UnaryExpression:
	- UnaryExpression
	UnaryExpressionNotPlusMinus

UnaryExpressionNotPlusMinus:
	PostfixExpression
	! UnaryExpression
	CastExpression

CastExpression:
	( PrimitiveType Dimopt ) UnaryExpression
	( Expression ) UnaryExpressionNotPlusMinus
	( Name Dim ) UnaryExpressionNotPlusMinus

MultiplicativeExpression:
	UnaryExpression
	MultiplicativeExpression * UnaryExpression
	MultiplicativeExpression / UnaryExpression
	MultiplicativeExpression % UnaryExpression

AdditiveExpression:
	MultiplicativeExpression
	AdditiveExpression + MultiplicativeExpression
	AdditiveExpression - MultiplicativeExpression

RelationalExpression:
	AdditiveExpression
	RelationalExpression < ShiftExpression
	RelationalExpression > ShiftExpression
	RelationalExpression <= ShiftExpression
	RelationalExpression >= ShiftExpression
	RelationalExpression instanceof ReferenceType

EqualityExpression:
	RelationalExpression
	EqualityExpression == RelationalExpression
	EqualityExpression != RelationalExpression

AndExpression:
	EqualityExpression
	AndExpression & EqualityExpression

InclusiveOrExpression:
	AndExpression
	InclusiveOrExpression | ExclusiveOrExpression

ConditionalAndExpression:
	InclusiveOrExpression
	ConditionalAndExpression && InclusiveOrExpression

ConditionalOrExpression:
	ConditionalAndExpression
	ConditionalOrExpression || ConditionalAndExpression

AssignmentExpression:
	ConditionalOrExpression
	Assignment

Assignment:
	LeftHandSide = AssignmentExpression

LeftHandSide:
	Name
	FieldAccess
	ArrayAccess

Expression:
	AssignmentExpression

ConstantExpression:
	Expression